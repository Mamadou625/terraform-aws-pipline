## 1. Creation of the VPC

resource "aws_vpc" "dev" {
  cidr_block = "10.0.0.0/16"

  tags = {
    Name = "Project_vpc"
  }
}

## 2. Creation of the subnets

## Public subnet
resource "aws_subnet" "Public" {
  vpc_id            = aws_vpc.dev.id
  cidr_block        = "10.0.1.0/24"
  availability_zone = "ca-central-1a"

  tags = {
    Name = "Public_subnet"
  }
}

## 3. Private subnet 1
resource "aws_subnet" "Private_1" {
  vpc_id            = aws_vpc.dev.id
  cidr_block        = "10.0.2.0/24"
  availability_zone = "ca-central-1a"

  tags = {
    Name = "Private_subnet_1"
  }
}

## 4.  Private subnet 2
resource "aws_subnet" "Private_2" {
  vpc_id            = aws_vpc.dev.id
  cidr_block        = "10.0.3.0/24"
  availability_zone = "ca-central-1b"

  tags = {
    Name = "Private_subnet_2"
  }
}

## 5. Create Security Group

## For the EC2 instance
resource "aws_security_group" "ec2_sg" {
  name        = "ec2_sg"
  description = "Allow SSH and HTTP"
  vpc_id      = aws_vpc.dev.id

  ingress {
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  ingress {
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

  tags = {
    Name = "ec2_sg"
  }
}

## 6. RDS Security Group
resource "aws_security_group" "rds_sg" {
  name        = "rds_sg"
  description = "Allow RDS access from EC2 SG"
  vpc_id      = aws_vpc.dev.id

  ingress {
    from_port       = 3306
    to_port         = 3306
    protocol        = "tcp"
    security_groups = [aws_security_group.ec2_sg.id]
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

  tags = {
    Name = "rds_sg"
  }
}

## 7. Internet gateway
resource "aws_internet_gateway" "gw" {
  vpc_id = aws_vpc.dev.id

  tags = {
    Name = "dev_gw"
  }
}

## 8. Route table
resource "aws_route_table" "Public_rt" {
  vpc_id = aws_vpc.dev.id

  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.gw.id
  }

  tags = {
    Name = "Public_rt"
  }
}

## 9. Associate Public Subnet with Route Table
resource "aws_route_table_association" "public_assoc" {
  subnet_id      = aws_subnet.Public.id
  route_table_id = aws_route_table.Public_rt.id
}

## 10. Create an EC2
resource "aws_instance" "dev_web" {
  ami                         = "ami-02018c46119b25ffe"
  instance_type               = "t2.micro"
  subnet_id                   = aws_subnet.Public.id
  vpc_security_group_ids      = [aws_security_group.ec2_sg.id]
  associate_public_ip_address = true
  key_name = "aws_key"

  tags = {
    Name = "Web-EC2"
  }
}

## 11. Create the RDS subnet group with 2 AZs
resource "aws_db_subnet_group" "rds_subnet_group" {
  name       = "rds-subnet-group"
  subnet_ids = [
    aws_subnet.Private_1.id,
    aws_subnet.Private_2.id
  ]

  tags = {
    Name = "RDS Subnet Group"
  }
}

## 12. Create the RDS database
resource "aws_db_instance" "mysql" {
  allocated_storage      = 20
  storage_type           = "gp2"
  engine                 = "mysql"
  engine_version         = "8.0"
  instance_class         = "db.t3.micro"
  db_subnet_group_name   = aws_db_subnet_group.rds_subnet_group.name
  vpc_security_group_ids = [aws_security_group.rds_sg.id]
  publicly_accessible    = false
  skip_final_snapshot    = true

  identifier = "mydb"
  username   = "admin"
  password   = "Toronto12345!" # Use `secretsmanager` or Terraform variables in real usage
  db_name    = "mydatabase"

  tags = {
    Name = "MySQL-RDS"
  }
}
